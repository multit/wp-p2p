<?php
/*
Plugin Name: CNSG Flex 2 Plugin
Description: Using Flex 2 inside wordpress
Plugin URI: http://#
Author: Andrea Fiorelli
Author URI: http://#
Version: 1.0
License: GPL2
Text Domain: Text Domain
Domain Path: Domain Path
*/

/*

    Copyright (C) 2015  andrea.fiorelli@gmail.com

    Referenze:
    http://code.tutsplus.com/articles/create-a-responsive-slider-plugin-with-flexslider-for-wordpress--wp-21839
    senza il plugin:
    http://www.premiumdw.com/2014/04/22/create-a-flexslider-gallery-using-attachment-images-in-wordpress-without-a-plugin/
    
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License, version 2, as
    published by the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

    /**
     * Enqueue scripts
     *
     * @param string $handle Script name
     * @param string $src Script url
     * @param array $deps (optional) Array of script names on which this script depends
     * @param string|bool $ver (optional) Script version (used for cache busting), set to null to disable
     * @param bool $in_footer (optional) Whether to enqueue the script before </head> or before </body>
     */


    // Richiama lo script che aggiunge alla pagina amministrazione il formato di post "HP Slider Images"
    require_once('slider-img-type.php');


    // Per prima cosa carico il Javascript di flex2
    function load_flex2_js() {
        wp_enqueue_script( 
            'killer-flex-plugin', 
            plugins_url('js/jquery.flexslider-min.js', __FILE__ ), 
            array( 'jquery' ), false, false);
        wp_enqueue_style( 
            'killer-flex-plugin', 
            plugins_url('css/flexslider.css', __FILE__ ), 
            array(  ), '0.1', 'screen');           
    }
    add_action( 'wp_enqueue_scripts', 'load_flex2_js' );


    // una volta caricati gli script, inserisco lo script che crea la slider 



            /*
######## ##       ######## ##     ##     ######  ##       #### ########  ######## ########  
##       ##       ##        ##   ##     ##    ## ##        ##  ##     ## ##       ##     ## 
##       ##       ##         ## ##      ##       ##        ##  ##     ## ##       ##     ## 
######   ##       ######      ###        ######  ##        ##  ##     ## ######   ########  
##       ##       ##         ## ##            ## ##        ##  ##     ## ##       ##   ##   
##       ##       ##        ##   ##     ##    ## ##        ##  ##     ## ##       ##    ##  
##       ######## ######## ##     ##     ######  ######## #### ########  ######## ##     ## 
                                                                        
                                                                         
namespace: "flex-",             //{NEW} String: Prefix string attached to the class of every element generated by the plugin
selector: ".slides > li",       //{NEW} Selector: Must match a simple pattern. '{container} > {slide}' -- Ignore pattern at your own peril
animation: "fade",              //String: Select your animation type, "fade" or "slide"
easing: "swing",               //{NEW} String: Determines the easing method used in jQuery transitions. jQuery easing plugin is supported!
direction: "horizontal",        //String: Select the sliding direction, "horizontal" or "vertical"
reverse: false,                 //{NEW} Boolean: Reverse the animation direction
animationLoop: true,             //Boolean: Should the animation loop? If false, directionNav will received "disable" classes at either end
smoothHeight: false,            //{NEW} Boolean: Allow height of the slider to animate smoothly in horizontal mode  
startAt: 0,                     //Integer: The slide that the slider should start on. Array notation (0 = first slide)
slideshow: true,                //Boolean: Animate slider automatically
slideshowSpeed: 7000,           //Integer: Set the speed of the slideshow cycling, in milliseconds
animationSpeed: 600,            //Integer: Set the speed of animations, in milliseconds
initDelay: 0,                   //{NEW} Integer: Set an initialization delay, in milliseconds
randomize: false,               //Boolean: Randomize slide order

// Usability features
pauseOnAction: true,            //Boolean: Pause the slideshow when interacting with control elements, highly recommended.
pauseOnHover: false,            //Boolean: Pause the slideshow when hovering over slider, then resume when no longer hovering
useCSS: true,                   //{NEW} Boolean: Slider will use CSS3 transitions if available
touch: true,                    //{NEW} Boolean: Allow touch swipe navigation of the slider on touch-enabled devices
video: false,                   //{NEW} Boolean: If using video in the slider, will prevent CSS3 3D Transforms to avoid graphical glitches

// Primary Controls
controlNav: true,               //Boolean: Create navigation for paging control of each clide? Note: Leave true for manualControls usage
directionNav: true,             //Boolean: Create navigation for previous/next navigation? (true/false)
prevText: "Previous",           //String: Set the text for the "previous" directionNav item
nextText: "Next",               //String: Set the text for the "next" directionNav item

// Secondary Navigation
keyboard: true,                 //Boolean: Allow slider navigating via keyboard left/right keys
multipleKeyboard: false,        //{NEW} Boolean: Allow keyboard navigation to affect multiple sliders. Default behavior cuts out keyboard navigation with more than one slider present.
mousewheel: false,              //{UPDATED} Boolean: Requires jquery.mousewheel.js (https://github.com/brandonaaron/jquery-mousewheel) - Allows slider navigating via mousewheel
pausePlay: false,               //Boolean: Create pause/play dynamic element
pauseText: 'Pause',             //String: Set the text for the "pause" pausePlay item
playText: 'Play',               //String: Set the text for the "play" pausePlay item

// Special properties
controlsContainer: "",          //{UPDATED} Selector: USE CLASS SELECTOR. Declare which container the navigation elements should be appended too. Default container is the FlexSlider element. Example use would be ".flexslider-container". Property is ignored if given element is not found.
manualControls: "",             //Selector: Declare custom control navigation. Examples would be ".flex-control-nav li" or "#tabs-nav li img", etc. The number of elements in your controlNav should match the number of slides/tabs.
sync: "",                       //{NEW} Selector: Mirror the actions performed on this slider with another slider. Use with care.
asNavFor: "",                   //{NEW} Selector: Internal property exposed for turning the slider into a thumbnail navigation for another slider

// Carousel Options
itemWidth: 0,                   //{NEW} Integer: Box-model width of individual carousel items, including horizontal borders and padding.
itemMargin: 0,                  //{NEW} Integer: Margin between carousel items.
minItems: 0,                    //{NEW} Integer: Minimum number of carousel items that should be visible. Items will resize fluidly when below this.
maxItems: 0,                    //{NEW} Integer: Maxmimum number of carousel items that should be visible. Items will resize fluidly when above this limit.
move: 0,                        //{NEW} Integer: Number of carousel items that should move on animation. If 0, slider will move all visible items.
                                
// Callback API
start: function(){},            //Callback: function(slider) - Fires when the slider loads the first slide
before: function(){},           //Callback: function(slider) - Fires asynchronously with each slider animation
after: function(){},            //Callback: function(slider) - Fires after each slider animation completes
end: function(){},              //Callback: function(slider) - Fires when the slider reaches the last slide (asynchronous)
added: function(){},            //{NEW} Callback: function(slider) - Fires after a slide is added
removed: function(){}           //{NEW} Callback: function(slider) - Fires after a slide is removed


*/


//$('ul.slides li').css('opacity', 0);      

// var iniW = $('ul.slides li').width();
// var iniH = $('ul.slides li').height();
// var diff = 400;
// var altezza = 300;


// $('.flexslider').flexslider({
//     animation: 'slide',
//     controlNav: false,
//     slideshowSpeed: 2000000000,
//     start: function() {
//       //$('ul.slides').css({'overflow', 'hidden'});
//       //$('ul.slides li').css('overflow', 'hidden');
//       //$('ul.slides>li>img').css({'width':50000,'height':iniH+diff});
//       //$('div.flex-viewport').css({'height':altezza});
//     },
//     before: function (slider) {
//       //TweenLite.to('li.flex-active-slide', 0.6, {opacity:0});
//       //TweenLite.to($(this), 0.6, {opacity:0});      
//       //slider.slides.css('width',iniW*1100%);
//       //TweenLite.fromTo('img.active-image', 3, {width:iniW,height:iniH},{width:iniW+20,height:iniH+20});      
//     },
//     added: function () {
//       //TweenLite.to('li.flex-active-slide', 0.6, {opacity:1});
//      //console.log($(this));
//       //TweenLite.to($(this), 0.6, {opacity:1});
//       // $('li.flex-active-slide img').css({
//       //   height: iniH,
//       //   width: iniW
//       // });

//     }    
// });




    function create_flex2_sliders(){
        ?>
       <script type="text/javascript" charset="utf-8">
        
        jQuery(window).load(function() {
          jQuery(".flexslider").flexslider({
            animation: "fade",
            controlNav: true,
            directionNav: false,
            // controlNav: "thumbnails",
            slideshowSpeed: 7000,
            start: function() {
               // console.log('slider iniziato');
            }            
          });
        }); 


        jQuery(window).load(function() {
          jQuery(".flexslider-left").flexslider({
            animation: "slide",
            direction: "vertical",
            animationSpeed: 300,
            controlNav: true,
            directionNav: false,
            slideshowSpeed: 7000,
            pauseOnAction: false,
            pauseOnHover: true, 
            initDelay: 400,
            start: function() {
               // console.log('slide sinistra caricata!');
            }                
          });
        });        

        jQuery(window).load(function() {
          jQuery(".flexslider-right").flexslider({
            animation: "slide",
            direction: "vertical",
            animationSpeed: 300,
            controlNav: true,
            directionNav: false,
            slideshowSpeed: 7000,
            pauseOnAction: false,
            pauseOnHover: true, 
            initDelay: 450,
            start: function() {
                //console.log('slide destra caricata!');
            }              
          });
        });                

        </script>
        <?php

    }
     
    add_action('wp_head', 'create_flex2_sliders');


     
     
    /**add the shortcode for the slider- for use in editor**/
     
    function get_double_slider($atts, $content=null){       
      // Dimensione slide piccola 670x300 (immagine) 670x300 box dei titoli da verificare 
      return $slider;
     
    }
     


    function get_big_flex2_slider($atts, $content=null){
        //MPORTANT TIP - Don't use camelCase or UPPER-CASE for your $atts attribute names
        // Dimensione featured image 1200x600


        // Disegna la slide grande in alto
        $slider = '<div class="row small-collapse">';
        $slider .= '<div class="columns small-12">';


        $posts_ids = explode(',',$atts[big]);
        $slider .= '<div class="flexslider"><ul class="slides">';
        foreach($posts_ids as $posts_id) { 
            $post = get_post($posts_id);
            $img= get_the_post_thumbnail( $post->ID, 'large' );
            $caption = $post->post_title;
            // Ricerca featured image            
            $thumb = wp_get_attachment_image_src( get_post_thumbnail_id($post->ID), 'thumbnail' );
            $thumb_link = $thumb['0'];            
            // Ricerca categoria e il suo colore
            $daticat = get_category_color($post->ID);         

            $slider.='<li data-thumb="'.$thumb_link.'">'.$img;
            $slider.='<p class="flex-caption" style="background-color:'.$daticat["colore"].'" >';
            $slider.= '<span class="slide-cat" style="background-color:' . $daticat["colore"] . '">'.$daticat["nome_categoria"].'</span>';
            $slider.= $caption .'</p></li>';

        }
        $slider.= '</ul></div>';
        $slider.= '</div></div>';


        // Disegna la slide piccola a sinistra
        $slider .= '<div class="row small-collapse">';
        $slider .= '<div class="columns small-6">';

        $posts_ids = explode(',',$atts[left]);
        $slider .= '<div class="flexslider-left" id="slider-small-sx"><ul class="slides">';
        foreach($posts_ids as $posts_id) { 
            $post = get_post($posts_id);
            $img= get_the_post_thumbnail( $post->ID, 'medium' );
            $caption = $post->post_title;

            $daticat = get_category_color($post->ID);

            $slider.='<li>'.$img.'<p class="flex-caption small" style="background-color:'. $daticat["colore"] .'" >';
            $slider.= '<span class="slide-cat-small">'.$daticat["nome_categoria"].'</span>';
            $slider.= $caption .'</p></li>';
        }
        $slider.= '</ul></div></div>';

        // Disegna la slide piccola a destra
        $slider .= '<div class="columns small-6">';

        $posts_ids = explode(',',$atts[right]);        
        $slider .= '<div class="flexslider-right" id="slider-small-dx"><ul class="slides">';
        foreach($posts_ids as $posts_id) { 
            $post = get_post($posts_id);
            $img= get_the_post_thumbnail( $post->ID, 'medium' );
            $caption = $post->post_title;
            $daticat = get_category_color($post->ID);
            $slider.='<li>'.$img.'<p class="flex-caption small" style="background-color:'. $daticat["colore"] .'" >';
            $slider.= '<span class="slide-cat-small">'.$daticat["nome_categoria"].'</span>';
            $slider.= $caption .'</p></li>';
        }
        $slider.= '</ul></div></div>';



        return $slider;
     
    }
     

    add_shortcode('small-slider', 'get_double_slider');

    add_shortcode('big-slider', 'get_big_flex2_slider');     


    // Utilities

    function get_category_color($post_id) {

        // Vecchio sistema basato su parent category da aggiornare
        // $categorie = get_the_terms( $post_id, "progetto" );
        // $parent = get_term($categorie[0]->parent,"progetto" );   
        // if ($parent->term_id) {
        //   $rl_res = $parent->taxonomy . '_' .  $parent->term_id;
        //   $color = get_field('colore_della_categoria',$rl_res );
        //   $nome_categoria = $parent->name;
        // } else {
        //   $rl_res = $categorie[0]->taxonomy . '_' .  $categorie[0]->term_id;
        //   $color = get_field('colore_della_categoria',$rl_res );
        //   $nome_categoria = $categorie[0]->name;
        // }   
        // $cat = array('colore' => $color, 'nome_categoria' => $nome_categoria );
        // return $cat;

        $cat = get_dettagli_categoria( $post_id);        
        return $cat;


    }


     
    // /**add template tag- for use in themes**/
    // function killer_flex2_slider(){
    //     print killer_get_slider();
    // }

    // Questa funzione seleziona i post del tipo HP slider E ritorna un html
    // funzione superata da cancellare
    function killer_flex2_get_slider(){
     
        //We'll fill this in later. 
        //echo "Ecco una bella slide";
        $slider= '<div class="flexslider">
          <ul class="slides">';
     
        // $killer_query= "post_type=slider-image";
        // query_posts($killer_query);                  
        // if (have_posts()) : while (have_posts()) : the_post(); 
        //     $img= get_the_post_thumbnail( $post->ID, 'large' );
        //     $caption = get_the_content();
        //     $slider.='<li>'.$img.'<p class="flex-caption">'. $caption .'</p></li>';
                 
        // endwhile; endif; wp_reset_query();
     
        $slider.= '</ul>
        </div>';         
        return $slider;
     
    }    


?>